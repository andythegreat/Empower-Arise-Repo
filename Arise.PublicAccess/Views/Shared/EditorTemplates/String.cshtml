@model string

@{
    var attrs = new Dictionary<string, object>();
    attrs.Add("placeholder", ViewData.ModelMetadata.GetDisplayName());

    var classes = "form-control ";

    if (ViewData["class"] != null)
    {
        classes += ViewData["class"];
    }

    var style = " ";

    if (ViewData["style"] != null)
    {
        style += ViewData["style"];
    }

    attrs.Add("style", style);

    //if (!String.IsNullOrEmpty(ViewContext.FormContext.FormId) && ViewContext.FormContext.FormId.ToLower().Contains("grid"))
    //{
    //    classes += "k-widget form-control";
    //}

    attrs.Add("class", classes);

    if (ViewData["disabled"] != null)
    {
        attrs.Add("disabled", "disabled");
    }

    //IEnumerable<ModelValidator> validators = ModelValidatorProviders.Providers.GetValidators(ViewData.ModelMetadata, ViewContext);
    //ModelClientValidationRule rule = validators.SelectMany(v => v.GetClientValidationRules()).FirstOrDefault(m => m.ValidationType == "length");
    //if (rule != null && rule.ValidationParameters.ContainsKey("max"))
    //{
    //    var length = rule.ValidationParameters["max"];
    //    attrs.Add("maxlength", length);
    //    attrs.Add("size", length);
    //}

    if (ViewData["size"] != null)
    {
        if (attrs.ContainsKey("size"))
        {
            if ((int)attrs["size"] > (int)ViewData["size"])
            {
                attrs["size"] = ViewData["size"];
            }
        }
        else
        {
            attrs.Add("size", ViewData["size"]);
        }
    }

    if (ViewData["data_val_required"] != null)
    {
        attrs.Add("data-val-required", ViewData["data_val_required"]);
    }
}

@Html.TextBoxFor(m => m, attrs)
@*@Html.Kendo().TextBoxFor(model => model).HtmlAttributes(attrs)*@